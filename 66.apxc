public class Covid19 {

    private Integer recoveredInArea = 0;
    public static Integer recoveredInCountry =0;

    // parameterized constructor to set class variables value
    public Covid19(Integer recoveredInArea) {
        if(recoveredInArea < 0) {
            this.recoveredInArea = 0;
        } else {
       	 	this.recoveredInArea = recoveredInArea;
        	recoveredInCountry += recoveredInArea;
        }
    }

    public void treadPatient() {
        recoveredInArea++;
        recoveredInCountry++;
    }

    public Integer getTreated() {
        return recoveredInArea;
    }
}

@isTest
public class Covid19Test {

    @isTest
    public static void treadPatientTest(){

        // create the istance of the class
        Covid19 warsaw = new Covid19(10);

        Integer treated = warsaw.getTreated();
        //check if the count is 10 or not
        System.assertEquals(10, treated, 'Treated count does not match');
        
        // create the istance of the class
        Covid19 cracow = new Covid19(115);

        treated = cracow.getTreated();
        //check if the count is 10 or not
        System.assertEquals(115, treated, 'Treated count does not match');

        //check the count of recoveredInCoutry, it should be 125
         System.assertEquals(125, Covid19.recoveredInCountry, 'Treated count does not match');
        
        warsaw.treadPatient();
		treated = warsaw.getTreated();
        System.assert(treated == 11, 'Treated count does not match');
        System.assert(Covid19.recoveredInCountry == 126, 'Treated count does not match');
    }
    
    @isTest
    public static void treadPatientTestNegative(){

        // create the istance of the class
        Covid19 warsaw = new Covid19(-10);

        Integer treated = warsaw.getTreated();
        //check if the count is 0 or not
        System.assertEquals(0, treated, 'Treated count does not match');
        
       
    }
}

public class Fitness {
    /**
     *  calculateBMI method
     *  accepts body weight (sfould be in kg)
     *  and body height (should be in meter)
     *  return BMI value
     */
    public static Decimal calculateBMI(Decimal weight, decimal height) {
        Decimal result = weight / (height * height);
        return result;
    }

    /**
     *  calculatePeace method
     *  accepts distance (in km)
     *  and minutes
     *  returns pace in km/hr
     */
    public static Decimal calculatePeace(Decimal distance, Decimal minutes) {
        Decimal hr = minutes/60;
        Decimal pace = distance / hr;
        return pace;
    }
}

@isTest
public class FitnessTest {
    @isTest
    public static Decimal calculateBMITest(){

        // create the istance of the class
        Fitness fit = new Fitness(5, 50);

        Decimal calculateBMI = fit.calculateBMI();
        //check if the count is 10 or not
        System.assertEquals(10, treated, 'Treated count does not match');
        
        // create the istance of the class
        Covid19 cracow = new Covid19(115);

        treated = cracow.getTreated();
        //check if the count is 10 or not
        System.assertEquals(115, treated, 'Treated count does not match');

        //check the count of recoveredInCoutry, it should be 125
         System.assertEquals(125, Covid19.recoveredInCountry, 'Treated count does not match');
        
        warsaw.treadPatient();
		treated = warsaw.getTreated();
        System.assert(treated == 11, 'Treated count does not match');
        System.assert(Covid19.recoveredInCountry == 126, 'Treated count does not match');
    }
    
    @isTest
    public static void treadPatientTestNegative(){

        // create the istance of the class
        Covid19 warsaw = new Covid19(-10);

        Integer treated = warsaw.getTreated();
        //check if the count is 0 or not
        System.assertEquals(0, treated, 'Treated count does not match');
        
       
    }
}



















